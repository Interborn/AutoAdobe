import { NextRequest, NextResponse } from "next/server";
import { z } from "zod";
import { withAuth } from "@/lib/api-handler";
import { ProductService } from "@/lib/services/product.service";
import { ObjectId } from "mongodb";

// Validation schema for creating a product
const createSchema = z.object({
  batchId: z.string().optional(),
  batchName: z.string().optional(),
  description: z.string().optional(),
  imageConfig: z.object({
    aspectRatio: z.string().optional(),
    artStyle: z.string().optional(),
    quality: z.enum(["low", "medium", "high"]).optional(),
    format: z.enum(["jpg", "png", "webp"]).optional(),
  }).optional(),
  enhancementOptions: z.object({
    removeSubject: z.boolean().optional(),
    removeBackground: z.boolean().optional(),
    enhanceQuality: z.boolean().optional(),
    compress: z.boolean().optional(),
    targetSize: z.number().optional(),
  }).optional(),
  metadata: z.object({
    title: z.string(),
    description: z.string(),
    tags: z.array(z.string()),
    category: z.string().optional(),
    contentType: z.enum(["photo", "illustration", "vector"]).optional(),
    editorialUsage: z.boolean().optional(),
    releaseInfo: z.object({
      modelRelease: z.boolean().optional(),
      propertyRelease: z.boolean().optional(),
      editorialRelease: z.boolean().optional(),
    }).optional(),
    price: z.object({
      amount: z.number(),
      currency: z.string(),
    }).optional(),
  }),
  priority: z.number().optional(),
});

export const GET = withAuth(async (req: NextRequest, { userId }) => {
  const { searchParams } = new URL(req.url);
  const batchId = searchParams.get("batchId") || undefined;
  const page = parseInt(searchParams.get("page") || "1", 10);
  const limit = parseInt(searchParams.get("limit") || "10", 10);

  const products = await ProductService.findByUserId(userId, {
    batchId,
    page,
    limit,
  });

  return NextResponse.json(products);
});

export const POST = withAuth(async (req: NextRequest, { userId }) => {
  const body = await req.json();
  const data = createSchema.parse(body);

  // The productId will be generated by the service
  const product = await ProductService.create({
    ...data,
    userId: new ObjectId(userId),
    originalImages: [],
    productId: "", // This will be overwritten by the service
  });

  return NextResponse.json(product);
});
